[ theory of operation ]

refer to doc/pic/theory_of_operation

In the above schema, 2 counters are used:
. a counter that is incremented at every rising edge of the input
signal whose frequency is to be measured. when the counter reaches
its upper limit, an interrupt occurs,
. a timer that is incremented at every prescaled clock tick. the
prescaler is user defined. when the timer reaches a top limit, an
overflow interrupt occurs.

As shown, an auxiliary software variable is used to track counter
overflows since the counter register is not wide enough for the
integration time.


[ API ]

void hfc_start(void);
start a frequency measure and return immediately.

uint8_t hfc_poll(void);
return non zero if the timer overflowed, meaning that the
next call to hfc_wait will immediately return.

uint32_t hfc_wait(void);
busy wait until timer overflow. return the frequency counter,
that must be multiplied by the frequency resolution to get the
actual frequency in hertz.

uint32_t hfc_start_wait(void);
combine hfc_start and hfc_wait.


[ limits ]
resolution: 1.907349 hz per tick
fmax: 500 Khz
acquisition time: 0.524288 seconds


[ tests ]

[[ resolution ]]

8 bit timer2 is used to generate a pwm whose period is:
(fcpu / (OCR2A * 2 * prescal))

# computed, measured(hfc)
30.637 30.517568
32.552 32.424916
33.967 33.378590
35.511 35.285938
37.202 37.193286
39.062 39.100634


[ formula ]

Having define the following,
. Fcpu is the cpu frequency in hertz,
. Fin the input frequency to measure in hertz,
. Fres the frequency resolution in hertz per bits,
. Cbits is the counter bit width (ie. 8 or 16),
. Tbits is the timer bit width (ie. 8 or 16),
. Tpresc is the timer prescaler,
. Tintegr integrating time, in seconds.

Then,
Tintegr = 2^Tbits * Tpresc / Fcpu

The following must hold:
Tintegr * Fin < 2^Cbits
Thus,
Fin < 2^Cbits / Tintegr
Thus,
Fin < 2^(Cbits - Tbits) * Fcpu / Tpresc

And,
Fres = 1 / Tintegr = Fcpu / (2^Tbits * Tpresc)
